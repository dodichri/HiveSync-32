name: Release Firmware

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-and-upload:
    if: startsWith(github.event.release.tag_name, 'v')
    runs-on: ubuntu-latest

    steps:
      - name: Check out tag commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install -U platformio

      - name: Derive version from tag (strip leading v)
        id: version
        run: |
          TAG='${{ github.event.release.tag_name }}'
          VERSION="${TAG#v}"
          echo "VERSION=$VERSION" | tee -a "$GITHUB_ENV"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Update FIRMWARE_VERSION in platformio.ini
        run: |
          python - << 'PY'
          import os, re, pathlib, sys
          p = pathlib.Path('platformio.ini')
          s = p.read_text(encoding='utf-8')
          version = os.environ['VERSION']
          # Replace value between the escaped quotes, preserving backslashes/quotes
          pat = re.compile(r'(-D\s*FIRMWARE_VERSION\s*=\s*\\+\")(.*?)(\\+\")')
          s2, n = pat.subn(lambda m: m.group(1) + version + m.group(3), s)
          if n == 0:
              print('FIRMWARE_VERSION define not found in platformio.ini', file=sys.stderr)
              sys.exit(1)
          p.write_text(s2, encoding='utf-8')
          print(f'Updated FIRMWARE_VERSION to {version}')
          PY
          grep -n "FIRMWARE_VERSION" platformio.ini

      - name: Build firmware with PlatformIO
        run: |
          pio run

      - name: Locate and stage firmware.bin
        id: stage
        run: |
          set -euo pipefail
          FIRMWARE_PATH=$(find .pio/build -type f -name firmware.bin | head -n 1)
          if [ -z "$FIRMWARE_PATH" ]; then
            echo "firmware.bin not found in .pio/build" >&2
            exit 1
          fi
          cp "$FIRMWARE_PATH" firmware.bin
          echo "path=firmware.bin" >> "$GITHUB_OUTPUT"

      - name: Upload asset to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            firmware.bin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

